import numpy as np
import pytest

from src.model_code.interactive_fixed_effect import InteractiveFixedEffect


@pytest.fixture
def normal_input():
    X = np.array(
        [
            [
                [-1.18775541, 0.13930048, -1.0111979, -2.79614049],
                [-3.31437866, -0.29828577, -3.60858373, -2.40489821],
                [-0.48556501, -3.27345056, 4.61644392, 0.70666412],
            ],
            [
                [-0.10509627, -2.04091154, -1.43984235, -2.80657453],
                [-2.14144368, -1.43833089, 0.45613916, -2.51124922],
                [-1.36104357, -1.9053894, 4.58706261, 1.85836145],
            ],
            [[1.0, 1.0, 1.0, 1.0], [1.0, 1.0, 1.0, 1.0], [1.0, 1.0, 1.0, 1.0]],
            [
                [0.65982146, -2.65987201, -0.94660116, -0.78080841],
                [0.65982146, -2.65987201, -0.94660116, -0.78080841],
                [0.65982146, -2.65987201, -0.94660116, -0.78080841],
            ],
            [
                [-2.85110504, -2.85110504, -2.85110504, -2.85110504],
                [-3.34376827, -3.34376827, -3.34376827, -3.34376827],
                [1.79288486, 1.79288486, 1.79288486, 1.79288486],
            ],
        ]
    )
    Y = np.array(
        [
            [-8.63640022, -16.01744339, -18.03955115, -21.83472808],
            [-19.09376238, -19.36575265, -13.15849355, -19.41834245],
            [7.61382859, -4.62878659, 26.65879902, 15.83486644],
        ]
    )
    beta = (1, 3, 5, 2, 4)
    input = {"X": X, "Y": Y, "beta": beta}
    return input


@pytest.fixture
def no_singular_input():
    # fmt: off
    X = np.array(
        [
            [
                [-0.53642517, 0.55487291, -0.66739856, 0.51803371, -1.40897776, 1.58222441, 3.23255015],  # noqa: B950
                [1.98979509, 0.53958399, 1.11492399, 1.44963224, -5.01019691, 2.50444339, 3.8817768],  # noqa: B950
                [0.58804482, -1.20575177, 0.98471051, 2.63621224, 1.79952133, -1.09262199, 3.69999927],  # noqa: B950
                [1.56105876, 0.95061669, 0.77275859, 3.46195381, -1.09493686, -0.87889517, 5.46750103],  # noqa: B950
                [4.82937269, 3.94025615, 4.10096772, 5.92014716, 2.99019961, 0.01829642, 6.66596161],  # noqa: B950
                [-0.79989936, -0.9759398, -2.84287343, -0.99191084, 0.44644508, -3.23206887, -1.74909374],  # noqa: B950
            ],
            [
                [1.60599661, -0.19145335, 0.50352644, 1.31509984, -1.53561205, 0.77492905, 1.14816961],  # noqa: B950
                [2.91864306, -1.37188649, 0.95957007, 0.73566903, -6.12116568, 0.47621593, 3.20206439],  # noqa: B950
                [0.09672019, 2.22620718, 1.4014626, 1.97823084, 0.68932471, 0.64492499, 1.73006593],  # noqa: B950
                [1.41111207, 0.64716292, 1.0387797, 4.17019484, 0.09561725, -0.20602287, 3.92406624],  # noqa: B950
                [1.37123828, 3.30240435, 2.90661677, 6.30931439, 2.5251606, 1.62842828, 5.58861439],  # noqa: B950
                [-2.38753528, 0.63821287, 0.34142183, 1.42797331, 1.83517043, -3.63034036, -0.15161653],  # noqa: B950
            ],
            [
                [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0],
                [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0],
                [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0],
                [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0],
                [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0],
                [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0],
            ],
            [
                [3.40756365, -0.58605345, 1.10987266, 1.94842677, -1.7628971, 0.00989558, 3.30921493],  # noqa: B950
                [3.40756365, -0.58605345, 1.10987266, 1.94842677, -1.7628971, 0.00989558, 3.30921493],  # noqa: B950
                [3.40756365, -0.58605345, 1.10987266, 1.94842677, -1.7628971, 0.00989558, 3.30921493],  # noqa: B950
                [3.40756365, -0.58605345, 1.10987266, 1.94842677, -1.7628971, 0.00989558, 3.30921493],  # noqa: B950
                [3.40756365, -0.58605345, 1.10987266, 1.94842677, -1.7628971, 0.00989558, 3.30921493],  # noqa: B950
                [3.40756365, -0.58605345, 1.10987266, 1.94842677, -1.7628971, 0.00989558, 3.30921493],  # noqa: B950
            ],
            [
                [-0.47828357, -0.47828357, -0.47828357, -0.47828357, -0.47828357, -0.47828357, -0.47828357],  # noqa: B950
                [-1.28449799, -1.28449799, -1.28449799, -1.28449799, -1.28449799, -1.28449799, -1.28449799],  # noqa: B950
                [-1.62288637, -1.62288637, -1.62288637, -1.62288637, -1.62288637, -1.62288637, -1.62288637],  # noqa: B950
                [0.31974842, 0.31974842, 0.31974842, 0.31974842, 0.31974842, 0.31974842, 0.31974842],  # noqa: B950
                [1.07924706, 1.07924706, 1.07924706, 1.07924706, 1.07924706, 1.07924706, 1.07924706],  # noqa: B950
                [-1.36632567, -1.36632567, -1.36632567, -1.36632567, -1.36632567, -1.36632567, -1.36632567],  # noqa: B950
            ],
        ]
    )
    Y = np.array(
        [
            [11.94748286, 3.56659525, 6.13054992, 10.51663938, -6.74470157, 6.5056618, 13.55410483],  # noqa: B950
            [20.80818684, -5.65760093, 5.55057849, 6.04057542, -31.03755454, 1.70029064, 20.37195812],  # noqa: B950
            [4.74935225, 4.69795934, 7.05195698, 14.37121866, -0.26186649, 0.66692579, 15.1018647],  # noqa: B950
            [17.17020837, 9.70064475, 11.86763772, 28.71016132, 0.72471408, 6.81274468, 26.74456622],  # noqa: B950
            [22.8667893, 25.3031344, 24.31299622, 44.11099912, 21.08870648, 16.81939731, 38.51275372],  # noqa: B950
            [-0.31256536, 1.11770869, -1.45407225, 2.39795487, 10.26244662, -16.07151954, 3.70553194],  # noqa: B950
        ]
    )
    # fmt: on
    beta = (1, 3, 5, 2, 4)
    input = {"X": X, "Y": Y, "beta": beta}
    return input


def test_fit_beta_hat(normal_input):
    interactive_estimator = InteractiveFixedEffect(normal_input["Y"], normal_input["X"])
    beta_hat, beta_hat_list, f_hat, lambda_hat = interactive_estimator.fit(
        r=2, beta_hat_0=normal_input["beta"]
    )
    expect_beta_hat = np.array([1.523508, 2.609971, 4.903340, 1.522600, 4.158032])
    np.testing.assert_array_almost_equal(beta_hat, expect_beta_hat)


def test_calculate_f_hat(normal_input):
    interactive_estimator = InteractiveFixedEffect(normal_input["Y"], normal_input["X"])
    f_hat = interactive_estimator._calculate_f_hat(
        np.array([normal_input["beta"]]), r=2
    )
    expect = np.array(
        [[1.5482942, 0.7668864], [0.3597737, -0.9481272], [0.6880028, -1.2300162]]
    )
    np.testing.assert_array_almost_equal(f_hat, expect)


def test_calculate_lambda_hat(normal_input):
    interactive_estimator = InteractiveFixedEffect(normal_input["Y"], normal_input["X"])
    f_hat = np.array(
        [[1.5482942, 0.7668864], [0.3597737, -0.9481272], [0.6880028, -1.2300162]]
    )
    lambda_hat = interactive_estimator._calculate_lambda_hat(
        np.array([normal_input["beta"]]), f_hat, r=2
    )
    expect = np.array(
        [
            [-1.6331689, 0.7396594],
            [0.1741834, 1.7876252],
            [-2.8125904, -0.1033363],
            [-1.5566757, -0.3892726],
        ]
    )
    np.testing.assert_array_almost_equal(lambda_hat, expect)


def test_calculate_beta_hat(normal_input):
    interactive_estimator = InteractiveFixedEffect(normal_input["Y"], normal_input["X"])
    f_hat = np.array(
        [[1.5482942, 0.7668864], [0.3597737, -0.9481272], [0.6880028, -1.2300162]]
    )
    lambda_hat = np.array(
        [
            [-1.6331689, 0.7396594],
            [0.1741834, 1.7876252],
            [-2.8125904, -0.1033363],
            [-1.5566757, -0.3892726],
        ]
    )
    beta_hat = interactive_estimator._calculate_beta_hat(f_hat, lambda_hat)
    expect = np.array([[1.094433, 2.897426, 4.978414, 1.978000, 3.971552]])
    np.testing.assert_array_almost_equal(beta_hat, expect)


def test_calculate_sde(no_singular_input):
    interactive_estimator = InteractiveFixedEffect(
        no_singular_input["Y"], no_singular_input["X"]
    )
    beta_hat = np.array([1.58449785, 2.91245544, 6.30095423, 0.86989401, 3.04711109])
    f_hat = np.array(
        [
            [-0.88737213, -0.39353972],
            [-2.05465827, 0.07617053],
            [-0.61543692, -0.91866276],
            [-0.26767279, -1.2226334],
            [0.68195069, -0.9397631],
            [-0.2747399, 1.61783688],
        ]
    )
    lambda_hat = np.array(
        [
            [-1.56381714, 1.04260534],
            [1.83882784, -0.05954027],
            [0.85435095, 0.14867027],
            [1.4736664, -2.50732845],
            [3.20032866, 2.44938346],
            [2.94462541, -1.11760536],
            [0.49865048, 1.52406267],
        ]
    )
    sde = interactive_estimator.calculate_sde(beta_hat, f_hat, lambda_hat)
    expect = np.array(
        [
            [1.0832833, -0.7134526, 0.1306661, -0.5062520, -0.5504280],
            [-0.7134526, 1.6206059, -2.8346082, 0.9519553, -0.7165637],
            [0.1306661, -2.8346082, 15.3139068, -4.1057292, 3.5201671],
            [-0.5062520, 0.9519553, -4.1057292, 1.6234902, -0.3200829],
            [-0.5504280, -0.7165637, 3.5201671, -0.3200829, 4.7635859],
        ]
    )
    np.testing.assert_array_almost_equal(sde, expect)
